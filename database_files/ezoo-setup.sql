--drop table feeding_schedules if exists
drop table if exists feeding_schedules cascade;

create table feeding_schedules (
    scheduleid integer not null primary key,
    feeding_time varchar (20),
    recurrence varchar (80), 
    food varchar (80),
    notes varchar (250)
);

-- drop table animals if exists
drop table if exists animals cascade;

create table animals (
  animalid integer primary key,
  "name" varchar (100),
  taxKingdom varchar (80),
  taxPhylum varchar (80),
  taxClass varchar (80),
  taxOrder varchar (80),
  taxFamily varchar (80),
  taxGenus varchar (80),
  taxSpecies varchar (80),
  height numeric(6,2),
  weight numeric(6,2),
  "type" varchar (80),
  healthStatus varchar (80),
  feedingSchedule integer,
  
  constraint animals_fk_feeding_schedule foreign key (feedingSchedule)
    references feeding_schedules (scheduleid)
);

--drop table users if exists
drop table if exists users cascade;

create table users (
    username varchar (80) not null primary key, 
    password varchar (100) not null, 
    enabled boolean, 
    firstname varchar (80) not null, 
    lastname varchar (80) not null,
    email varchar (80) not null, 
    phone varchar (30)
);

--drop table roles if exists
drop table if exists roles cascade; 

create table roles (
    id bigint not null primary key generated by default as identity (increment 1),
    name varchar (50)
);

insert into roles (id, name) values 
    (1, 'ROLE_USER'),
    (2, 'ROLE_ADMIN'),
    (3, 'ROLE_EMPLOYEE');

-- drop table authorities if exists 
drop table if exists authorities cascade;

create table authorities (
    username varchar (80) not null,
    authority bigint not null,
    
    constraint authorities_pkey primary key (username, authority),
    constraint authorities_fk_role foreign key (authority) references roles (id) on delete cascade,
    constraint authorities_fk_username foreign key (username) references users (username) on delete cascade
);

-- drop table groups if exists 
drop table if exists groups cascade;

create table groups (
    id bigint not null generated by default as identity ( increment 1 start 1 minvalue 1 ),
    group_name varchar (30),
    
    constraint groups_pkey primary key (id)
);

-- drop table group_authorities if exists 
drop table if exists group_authorities cascade;

create table group_authorities (
    group_id bigint not null, 
    authority varchar (50) not null, 
    
    constraint group_auth_pkey primary key (group_id, authority),    
    constraint fk_group_authorities_group foreign key (group_id)
        references groups (id)
        
       
);

-- drop table groups_members if exists 
drop table if exists group_members cascade;

create table group_members (
    username character varying(30) not null,
    group_id bigint not null,
    id bigint not null generated by default as identity ( increment 1 start 1 minvalue 1 ),
    
    constraint group_members_pkey primary key (id),
    constraint fk_group_members_group foreign key (group_id)
        references groups (id)
);

--drop table events if exists
drop table if exists events cascade;

create table events (
    eventid integer not null generated by default as identity (increment 1),
    primary key (eventid),
    creator varchar (90) not null,
    "name" varchar (100) not null,
    "time" timestamp (6) not null,
    location varchar (80) not null,
    description varchar (250),
    
    constraint fk_event_creator foreign key (creator) references public.users (username)
);

--drop table events if exists
drop table if exists event_attendees cascade;

create table event_attendees (
    username varchar(80) not null, 
    eventid integer not null,
    constraint event_attendees_pkey primary key (username, eventid),
    constraint fk_event_attendees_username foreign key (username) references users (username), 
    constraint fk_event_attendees_eventid foreign key (eventId) references events (eventid)
);
